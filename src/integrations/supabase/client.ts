// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://hdnaqkziirehubztmueh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhkbmFxa3ppaXJlaHVienRtdWVoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5OTUyNDcsImV4cCI6MjA2MTU3MTI0N30.9zJSsbjQc8XIyEnWIQgwopNpXPrwQqjuj0_nmDG56L4";

console.log('Supabase URL:', SUPABASE_URL);
console.log('Supabase Key (first 20 chars):', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

// Test network connectivity
fetch(SUPABASE_URL, { method: 'HEAD' })
  .then(() => console.log('✅ Supabase URL is accessible'))
  .catch((error) => console.warn('⚠️ Network connectivity issue:', error.message));

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false, // Disable to prevent conflicts
    storageKey: 'sat-practice-auth' // Use a unique storage key
  },
  global: {
    headers: {
      'X-Client-Info': 'sat-practice-app'
    }
  }
});

// Add error handling for network issues
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state change:', event, session ? 'Session exists' : 'No session');
});
